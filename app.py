from flask import Flask, render_template, request, redirect, url_for, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from datetime import datetime
from flask_migrate import Migrate
from sqlalchemy import or_
from flask_wtf.csrf import CSRFProtect
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
app = Flask(__name__)
# csrf = CSRFProtect(app)
app.config['SECRET_KEY'] = 'mysecret'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///journal.db'  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'
migrate = Migrate(app, db)
# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(60), nullable=False)
    entries = db.relationship('Entry', backref='author', lazy=True)

    def __repr__(self):
        return f"<User {self.username}>"

class Entry(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    date = db.Column(db.Date, default=datetime.utcnow, nullable=False)
    morning_mood = db.Column(db.String(10), nullable=True)  # –≠–º–æ—Ü–∏—è —É—Ç—Ä–∞ (—Å–º–∞–π–ª–∏–∫)
    afternoon_mood = db.Column(db.String(10), nullable=True)  # –≠–º–æ—Ü–∏—è –¥–Ω—è (—Å–º–∞–π–ª–∏–∫)
    evening_mood = db.Column(db.String(10), nullable=True)  # –≠–º–æ—Ü–∏—è –≤–µ—á–µ—Ä–∞ (—Å–º–∞–π–ª–∏–∫)
    night_mood = db.Column(db.String(10), nullable=True)  # –≠–º–æ—Ü–∏—è –Ω–æ—á–∏ (—Å–º–∞–π–ª–∏–∫)
    note = db.Column(db.Text, nullable=True)

    def __repr__(self):
        return f"<Entry by {self.author.username} on {self.date}>"


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Flask-Login
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/journal', methods=['GET', 'POST'])
@login_required
def journal():
    today = datetime.today().date()  # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    selected_mood = request.args.get('mood')  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ
    entries = Entry.query.filter_by(user_id=current_user.id, date=today)

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
    if selected_mood:
        entries = entries.filter(or_(
            Entry.morning_mood == selected_mood,
            Entry.afternoon_mood == selected_mood,
            Entry.evening_mood == selected_mood,
            Entry.night_mood == selected_mood
        ))

    entries = entries.all()

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
    moods = {'morning': [], 'afternoon': [], 'evening': [], 'night': []}
    for entry in entries:
        moods['morning'].append(entry.morning_mood)
        moods['afternoon'].append(entry.afternoon_mood)
        moods['evening'].append(entry.evening_mood)
        moods['night'].append(entry.night_mood)

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω —Å—É—Ç–æ–∫
    mood_data = {
        'üòä': {'morning': moods['morning'].count('üòä'), 'afternoon': moods['afternoon'].count('üòä'),
               'evening': moods['evening'].count('üòä'), 'night': moods['night'].count('üòä')},
        'üôÇ': {'morning': moods['morning'].count('üôÇ'), 'afternoon': moods['afternoon'].count('üôÇ'),
               'evening': moods['evening'].count('üôÇ'), 'night': moods['night'].count('üôÇ')},
        'üòê': {'morning': moods['morning'].count('üòê'), 'afternoon': moods['afternoon'].count('üòê'),
               'evening': moods['evening'].count('üòê'), 'night': moods['night'].count('üòê')},
        'üòï': {'morning': moods['morning'].count('üòï'), 'afternoon': moods['afternoon'].count('üòï'),
               'evening': moods['evening'].count('üòï'), 'night': moods['night'].count('üòï')},
        'üòû': {'morning': moods['morning'].count('üòû'), 'afternoon': moods['afternoon'].count('üòû'),
               'evening': moods['evening'].count('üòû'), 'night': moods['night'].count('üòû')}
    }

    return render_template('journal.html', entries=entries, selected_mood=selected_mood, mood_data=mood_data)


@app.route('/edit_entry', methods=['POST'])
@login_required
def edit_entry():
    entry_id = request.form['entry_id']
    morning_mood = request.form['morning_mood']
    afternoon_mood = request.form['afternoon_mood']
    evening_mood = request.form['evening_mood']
    night_mood = request.form['night_mood']
    note = request.form['note']

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –ø–æ ID
    entry = Entry.query.get(entry_id)

    if entry:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        entry.morning_mood = morning_mood
        entry.afternoon_mood = afternoon_mood
        entry.evening_mood = evening_mood
        entry.night_mood = night_mood
        entry.note = note

        db.session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    return redirect(url_for('journal'))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–Ω–µ–≤–Ω–∏–∫–∞

@app.route('/journal/new', methods=['GET', 'POST'])
@login_required
def new_entry():
    if request.method == 'POST':
        morning_mood = request.form['morning_mood']
        afternoon_mood = request.form['afternoon_mood']
        evening_mood = request.form['evening_mood']
        night_mood = request.form['night_mood']
        note = request.form['note']

        new_entry = Entry(
            user_id=current_user.id,
            morning_mood=morning_mood,
            afternoon_mood=afternoon_mood,
            evening_mood=evening_mood,
            night_mood=night_mood,
            note=note
        )
        db.session.add(new_entry)
        db.session.commit()
        return redirect(url_for('journal'))
    return render_template('new_entry.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user and bcrypt.check_password_hash(user.password, password):
            login_user(user)
            return redirect(url_for('journal'))
        else:
            return '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 401
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = bcrypt.generate_password_hash(request.form['password']).decode('utf-8')
        new_user = User(username=username, password=password)
        db.session.add(new_user)
        db.session.commit()
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
@app.route('/')
def index():
    if current_user.is_authenticated:
        return redirect(url_for('journal'))
    return redirect(url_for('login'))

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —ç–º–æ—Ü–∏—è–º–∏
@app.route('/calendar')
@login_required
def calendar():
    entries = Entry.query.filter_by(user_id=current_user.id).all()
    calendar_data = {}
    for entry in entries:
        calendar_data[entry.date] = entry.mood
    return render_template('calendar.html', calendar_data=calendar_data)


@app.route('/day', methods=['GET', 'POST'])
@login_required
def day():
    day_number = request.args.get('day')  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
    month_number = request.args.get('month', str(datetime.today().month))  # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—Ü –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL, –∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º day_number –∏ month_number –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    day_number = day_number.zfill(2)  # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å, –µ—Å–ª–∏ –¥–µ–Ω—å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 1 —Ü–∏—Ñ—Ä—ã
    month_number = month_number.zfill(2)  # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å, –µ—Å–ª–∏ –º–µ—Å—è—Ü —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 1 —Ü–∏—Ñ—Ä—ã

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥)
    current_year = datetime.today().year  # –¢–µ–∫—É—â–∏–π –≥–æ–¥
    date_str = f'{current_year}-{month_number}-{day_number}'  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-02-22)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
    mood = Entry.query.filter_by(user_id=current_user.id, date=date_obj).first()

    if request.method == 'POST':
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        morning_mood = request.form['morning_mood']
        afternoon_mood = request.form['afternoon_mood']
        evening_mood = request.form['evening_mood']
        night_mood = request.form['night_mood']
        note = request.form['note']  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫—É

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        if mood:
            mood.morning_mood = morning_mood
            mood.afternoon_mood = afternoon_mood
            mood.evening_mood = evening_mood
            mood.night_mood = night_mood
            mood.note = note
        else:
            new_entry = Entry(
                user_id=current_user.id,
                date=date_obj,
                morning_mood=morning_mood,
                afternoon_mood=afternoon_mood,
                evening_mood=evening_mood,
                night_mood=night_mood,
                note=note  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–º–µ—Ç–∫—É
            )
            db.session.add(new_entry)

        db.session.commit()
        return redirect(url_for('journal'))

    return render_template('day.html', day=day_number, month=month_number, mood=mood)
@app.route('/save_note', methods=['POST'])
@login_required
def save_note():
    note = request.form['note']
    # –¢—É—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    today = datetime.today().date()
    entry = Entry.query.filter_by(user_id=current_user.id, date=today).first()

    if entry:
        entry.note = note
    else:
        new_entry = Entry(user_id=current_user.id, date=today, note=note)
        db.session.add(new_entry)

    db.session.commit()
    return redirect(url_for('journal'))

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    with app.app_context():
        db.create_all()
    app.run(debug=True)
